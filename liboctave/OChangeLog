Fri Jan 31 01:12:25 1992  John W. Eaton  (jwe at andy.che.utexas.edu)

	Changes for GCC2:
        -----------------

	* Most .hP and .ccP files: Remove unnecessary `auto' keyword (this
	cruft was added to allow earlier versions of g++ to compile
	certain function definitions).
	* Remove `inline' qualifiers for functions in .ccP files.
	* Pass and return all class objects by reference.

Wed Dec 18 11:08:15 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* Pass vector and matrix objects by reference to avoid (I think) a
	g++-1.40 bug and get the NLP class working again.  I didn't
	understand reference types very well when I first wrote this, so
	there were lots of problems...  I'm sure there are more places
	this needs fixing -- for example, the ODE, DAE and SDAE classes
	probably need similar changes.

Mon Aug 19 03:54:59 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* SDAE.ccP, SDAE.hP:  New files that define an ODE + sensitivity
	analysis class based on DDASAC.  Needs work to have full
	functionality.

	* SDAEFunc.ccP SDAEFunc.hP:  New files that define a class of
	functions to be used by the SDAE class.

Wed Jul 24 04:01:49 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* FEGrid.ccP, FEGrid.hP:  New files that define a finite element
	grid class -- boundaries must be in ascending order and must have
	nonzero width, etc.

Tue Jul 23 01:20:27 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* Matrix.ccP, Matrix.hP:  (rowset, colset) New member functions.

	* DAE.ccP, DAE.hP, DAEFunc.ccP, DAEFunc.hP:  New files, analogous
	to the ODE files, that define a DAE class.  Maybe working.

	* ODE.ccP, ODE.hP:  Modify to use new ODEFunc class.

	* ODEFunc.hP, ODEFunc.ccP:  New files that define a function class
	for the ODE object.

Mon Jul 22 00:06:36 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* convert bounds, linear constraint, nonlinear constraint,
	objective function, nlp, ode, and collocation weight classes to
	generic style of libg++.

	* NLEqn.hP, NLEqn.ccP:  New files that define a class for
	solving square systems of nonlinear equations.  Maybe working.

	* NLFunc.hP, NLFunc.ccP:   New files that define a class for
	nonlinear functions returning vectors.  Modified nl_const class to
	use NLFunc objects instead of handling functions with jacobians
	directly.  Modifed nlp class to use the new definition of nl_const
	constructors.

Sun Jul 21 06:31:39 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* LinEqn.hP, LinEqn.ccP:   New files that define a class for
	solving sets of linear equations.  Maybe working.

Thu Jul 18 00:40:59 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* SVD.hP, SVD.ccP:  New files that define an SVD class.  Maybe
	working.

Wed Jul 17 05:15:41 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* Matrix.{h,cc}P:  New methods:  inverse (a), a.inverse (),
	a.determinant (), a.condition_number ().  Based on linpack
	routines.

	* *.h *.cc Matrix.hP Matrix.ccP:  Removed extraneous this->
	references which aren't needed and look ugly.

	* colloc.cc:  New private data member `initialized'.  Only compute
	values for r, q, A, and B when needed and then only if initialized
	is false.  Set initialized = false when any size/constant data
	changes.  Reset it to true before returning from init().

	* Change type of most void foo::bar_set() methods to be of type
	foo& and return *this so that they can be chained together:
	a.foo().bar().baz();

	* *.h, but not *.hP:  Moved all definitions of functions into .cc
	files.  Hoping to speed up compilation somewhat.

Tue Jul 16 08:33:01 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* *.h:  make sure that include files are only included once by
	using #ifndef _foo_h / #define _foo_h / ... / #endif _foo_h.

	* nlp.cc:  appears to work for user supplied gradient and jacobian
	functions.  Linear constraints appear to work.

	* Add stream output operators for the <T>Matrix and <T>Vec
	classes.

	* Updated the nlp class to handle new definition of the objective
	function, bounds, and constraints.

	* New test programs:  bounds-test, lin_const-test, and nl_const-test.

	* New classes:

	    objective:  instead of specifying the objective function
	    directly, you provide the nlp class with an objective function
	    object.  The user has the option of specifying a gradient
	    function.

	    bounds, lin_const, nl_const:  these replace the constraint
	    object.  nl_const allows the user the option of specifying a
	    jacobian function.

	    The nl_const and objective objects should probably both know
	    how to compute gradient information whether the user supplies
	    a function or not.

	    colloc:  collocation object.  The test program for this still
	    needs to be written.

Sun Jul 14 22:50:51 1991  John W. Eaton  (jwe at andy.che.utexas.edu)

	* Have very minimal but mostly working classes for simple matrix
	operations (uses some BLAS routines), ordinary differential
	equations (based on LSODE), nonlinear programming (based on
	NPSOL), and constraint sets (for NLP).

	* About time to start this, since I seem to actually be making
	progress on this stuff now.

