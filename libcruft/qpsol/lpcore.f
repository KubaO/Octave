      SUBROUTINE LPCORE( LP, MINSUM, NAMED, ORTHOG, UNITQ, VERTEX,
     *                   INFORM, ITER, ITMAX, LCRASH,
     *                   N, NCLIN, NCTOTL, NROWA, NACTIV, NFREE, NUMINF,
     *                   ISTATE, KACTIV, KFREE,
     *                   OBJ, XNORM,
     *                   A, AX, BL, BU, CLAMDA, CVEC, FEATOL, X,
     *                   IW, LIW, W, LW )
C
C     IMPLICIT           REAL*8(A-H,O-Z)
      INTEGER            INFORM, ITER, ITMAX, LCRASH, N, NCLIN, NCTOTL,
     *                   NROWA, NACTIV, NFREE, NUMINF, LIW, LW
      INTEGER            ISTATE(NCTOTL), KACTIV(N), KFREE(N)
      INTEGER            IW(LIW)
      DOUBLE PRECISION   ASIZE, DTMAX, DTMIN, OBJ, XNORM
      DOUBLE PRECISION   A(NROWA,N), AX(NROWA), BL(NCTOTL), BU(NCTOTL),
     *                   CLAMDA(NCTOTL), CVEC(N), FEATOL(NCTOTL), X(N)
      DOUBLE PRECISION   W(LW)
      LOGICAL            LP, MINSUM, NAMED, ORTHOG, UNITQ, VERTEX
C
      INTEGER            NOUT, MSG, ISTART, LENNAM, NROWRT, NCOLRT, NQ
      DOUBLE PRECISION   WMACH, PARM
      COMMON    /SOLMCH/ WMACH(15)
      COMMON    /SOL1CM/ NOUT, MSG, ISTART
      COMMON    /SOL3CM/ LENNAM, NROWRT, NCOLRT, NQ
      COMMON    /SOL4CM/ PARM(10)
      COMMON    /SOL5CM/ ASIZE, DTMAX, DTMIN
C
      INTEGER            LOCLP
      COMMON    /SOL1LP/ LOCLP(15)
C
C  *********************************************************************
C  LPCORE  FINDS A FEASIBLE POINT FOR THE GENERAL LINEAR CONSTRAINTS
C  AND BOUNDS. THE SUM OF THE INFEASIBILITIES IS MINIMIZED USING
C  A LINEAR PROGRAMMING ALGORITHM WHICH MAY PERFORM NON-SIMPLEX
C  STEPS. AT EACH ITERATION THE DIRECTION OF SEARCH IS DEFINED AS
C  THE PROJECTION OF THE STEEPEST-DESCENT DIRECTION. THIS
C  PROJECTION IS COMPUTED USING AN ORTHOGONAL FACTORIZATION OF THE
C  MATRIX OF CONSTRAINTS IN THE WORKING SET.
C
C  IF  LP = .TRUE.,  LPCORE  WILL SOLVE THE LINEAR PROGRAMMING PROBLEM
C  DEFINED BY THE OBJECTIVE CVEC, THE CONSTRAINT MATRIX  A  AND THE
C  BOUNDS  BL, BU.
C
C  VALUES OF ISTATE(J)....
C
C     - 2         - 1         0           1          2         3
C  A*X LT BL   A*X GT BU   A*X FREE   A*X = BL   A*X = BU   BL = BU
C
C  IF  VERTEX = .TRUE.,  THE INITIAL POINT  X  WILL BE MADE INTO A
C  VERTEX BY REGARDING SOME OF THE FREE VARIABLES  X(J)  AS BEING ON AN
C  TEMPORARY BOUND.  SOME OF THESE VARIABLES MAY REMAIN ON THEIR
C  TEMPORARY BOUNDS.  IF SO, THEIR STATE WILL BE  ISTATE(J) = 4 .
C
C  SYSTEMS OPTIMIZATION LABORATORY, STANFORD UNIVERSITY.
C  VERSION 1.0. DECEMBER 1981.
C  VERSION 2.0.     JUNE 1982.
C  VERSION 3.0.  OCTOBER 1982.
C  VERSION 3.2.  APRIL   1984.
C
C  COPYRIGHT  1982  STANFORD UNIVERSITY.
C
C  THIS MATERIAL MAY BE REPRODUCED BY OR FOR THE U.S. GOVERNMENT PURSU-
C  ANT TO THE COPYRIGHT LICENSE UNDER DAR CLAUSE 7-104.9(A) (1979 MAR).
C
C  THIS MATERIAL IS BASED UPON WORK PARTIALLY SUPPORTED BY THE NATIONAL
C  SCIENCE FOUNDATION UNDER GRANTS MCS-7926009 AND ECS-8012974; THE
C  DEPARTMENT OF ENERGY CONTRACT AM03-76SF00326, PA NO. DE-AT03-
C  76ER72018; AND THE ARMY RESEARCH OFFICE CONTRACT DAA29-79-C-0110.
C
C  *********************************************************************
C
      INTEGER            IADD, IDUMMY, IFIX, IS, ISDEL, JADD, JBIGST,
     *                   JDEL, JSMLST, KB, KBIGST, KDEL, KGFIX, KSMLST,
     *                   LANORM, LAP, LNAMES, LPROB, LPX, LQTG, LRLAM,
     *                   LROWA, LRT, LWRK, LZY, MSGLVL, MSTALL, NCLIN0,
     *                   NCNLN, NCOLZ, NDEL, NFIXED, NROWJ, NSTALL
      INTEGER            MAX0
      DOUBLE PRECISION   ALFA, ANORM, ATPHIT, BIGALF, BIGBND, BIGDX,
     *                   BND, CONDMX, CONDT, CSLAST, DINKY, EPSMCH,
     *                   EPSPT9, FEAMAX, FEAMIN, FLMAX, GFNORM, GTP,
     *                   OBJLP, OBJSIZ, PALFA, PNORM, RDLAST, SMLLST,
     *                   SNLAST, SUMINF, TOLACT, TRULAM, WGFIX, ZTGNRM
      DOUBLE PRECISION   ZERO, ONE
      DOUBLE PRECISION   DOT, QUOTNT, V2NORM
      DOUBLE PRECISION   DABS, DMAX1
      LOGICAL            ADDED, DELETE, FIRSTV, HITLOW, MODFYG,
     *                   NULLR, PRNT, STALL, UNITPG
      DATA               ZERO, ONE /0.0D+0, 1.0D+0/
      DATA               LPROB     / 2HLP /
C
C  SPECIFY MACHINE-DEPENDENT PARAMETERS.
C
      EPSMCH = WMACH(3)
      FLMAX  = WMACH(7)
C
      LNAMES = LOCLP( 1)
      LANORM = LOCLP( 4)
      LAP    = LOCLP( 5)
      LPX    = LOCLP( 6)
      LQTG   = LOCLP( 7)
      LRLAM  = LOCLP( 8)
      LRT    = LOCLP( 9)
      LZY    = LOCLP(10)
      LWRK   = LOCLP(11)
C
C  INITIALIZE
C
      NCNLN  = 0
      NCLIN0 = MAX0( NCLIN, 1 )
      NROWJ  = 1
C
      INFORM = 0
      ITER   = 0
      JADD   = 0
      JDEL   = 0
      LROWA  = NROWA*(N - 1) + 1
      NDEL   = 0
      NSTALL = 0
      NUMINF = 1
C
      MSGLVL = MSG
      MSG    = 0
      IF (ITER .GE. ISTART) MSG = MSGLVL
C
      BIGBND = PARM(1)
      BIGDX  = PARM(2)
      TOLACT = PARM(3)
      EPSPT9 = PARM(4)
C
      ALFA   = ZERO
      CONDMX = FLMAX
      OBJLP  = ZERO
C
      ADDED  = .TRUE.
      FIRSTV = .FALSE.
      MODFYG = .TRUE.
      NULLR  = .TRUE.
      UNITPG = .FALSE.
C
      CALL CONDVC( NCTOTL, FEATOL, NCTOTL, 1, FEAMAX, FEAMIN )
C
C  ---------------------------------------------------------------------
C  GIVEN AN INITIAL POINT  X, COMPUTE THE FOLLOWING.....
C  (1) THE INITIAL WORKING SET.
C  (2) THE  TQ  FACTORIZATION OF THE MATRIX OF CONSTRAINTS IN THE
C      WORKING SET.
C  (3) THE VALUE AND GRADIENT OF THE SUM OF INFEASIBILITIES AT THE POINT
C      X.  IF  X  IS FEASIBLE AND THE SOLUTION OF AN LP IS REQUIRED, THE
C      LINEAR OBJECTIVE FUNCTION AND GRADIENT IS COMPUTED.
C
C  THE ARRAY  RLAMDA  IS USED AS TEMPORARY WORK SPACE.
C  ---------------------------------------------------------------------
      CALL LPCRSH( ORTHOG, UNITQ, VERTEX, LCRASH, N, NCLIN, NCLIN0,
     *             NCTOTL, NQ, NROWA, NROWRT, NCOLRT, NACTIV,
     *             NCOLZ, NFREE, ISTATE, KACTIV, KFREE,
     *             BIGBND, TOLACT, XNORM,
     *             A, W(LANORM), AX, BL, BU, X,
     *             W(LQTG), W(LRT), W(LZY), W(LPX), W(LWRK), W(LRLAM) )
C
      CALL LPGRAD( LP, N, NCTOTL, NROWA,
     *             BIGBND, FEAMIN, NUMINF, SUMINF, ISTATE,
     *             A, BL, BU, CVEC, FEATOL, W(LQTG), X )
C
      CALL ZYPROD( 6, N, NACTIV, NCOLZ, NFREE, NQ, UNITQ,
     *             KACTIV, KFREE, W(LQTG), W(LZY), W(LWRK) )
C
      OBJ    = SUMINF
      IF (LP) OBJLP = DOT( N, CVEC, N, 1, X, N, 1 )
      IF (LP  .AND.  NUMINF .EQ. 0) OBJ = OBJLP
C
      IF (NUMINF .EQ. 0  .AND.  .NOT. LP) GO TO 900
C
C  .......................START OF THE MAIN LOOP........................
C
C  DEFINE SMALL QUANTITIES THAT REFLECT THE MAGNITUDE OF  C,  X,
C  AND THE NORM OF THE CONSTRAINTS IN THE WORKING SET.
C
  100 OBJSIZ = (ONE    + DABS( OBJ )) / (ONE    + XNORM)
      IF (NUMINF .EQ. 0)
     *OBJSIZ = (EPSMCH + DABS( OBJ )) / (EPSMCH + XNORM)
      ANORM  = ZERO
      IF (NACTIV .GT. 0) ANORM = DABS( DTMAX )
      DINKY  = EPSPT9 * DMAX1( ANORM, OBJSIZ )
C
C  COMPUTE THE NORMS OF THE PROJECTED GRADIENT AND THE GRADIENT WITH
C  RESPECT TO THE FREE VARIABLES.
C
      ZTGNRM = ZERO
      IF (NCOLZ .GT. 0) ZTGNRM = V2NORM( NCOLZ, W(LQTG), NCOLZ, 1 )
      GFNORM = ZTGNRM
      IF (NFREE .GT. 0  .AND.  NACTIV .GT. 0)
     *                  GFNORM = V2NORM( NFREE, W(LQTG), NFREE, 1 )
C
      IF (MSG .GE. 80) WRITE (NOUT, 1100) ZTGNRM, DINKY
      DELETE = ZTGNRM .LE. DINKY
C
C  PRINT THE DETAILS OF THIS ITERATION.
C
      PRNT   = ADDED  .OR.  NDEL .GT. 1
      IF (.NOT. PRNT) GO TO 120
C
      CONDT  = QUOTNT( DTMAX, DTMIN )
C
      CALL LPPRT ( LP, NROWA, NROWRT, NCOLRT, N, NCLIN, NCLIN0, NCTOTL,
     *             NFREE, ISDEL, NACTIV, NCOLZ, ITER, JADD, JDEL,
     *             ALFA, CONDT, NUMINF, SUMINF, OBJLP,
     *             ISTATE, KFREE,
     *             A, W(LRT), X, W(LWRK), W(LAP) )
C
      ADDED  = .FALSE.
      JADD   = 0
      JDEL   = 0
C
  120 IF (NUMINF .EQ. 0  .AND.  .NOT. LP) GO TO 900
      IF (.NOT. DELETE) GO TO 300
C
C  ---------------------------------------------------------------------
C  THE PROJECTED GRADIENT IS NEGLIGIBLE.
C  WE HAVE TO DELETE A CONSTRAINT BEFORE A MOVE CAN BE MADE.
C  ---------------------------------------------------------------------
      CALL GETLAM( LPROB, N, NCLIN0, NCTOTL,
     *             NACTIV, NCOLZ, NFREE, NROWA,
     *             NROWRT, NCOLRT, JSMLST, KSMLST, SMLLST,
     *             ISTATE, KACTIV,
     *             A, W(LANORM), W(LQTG), W(LRLAM), W(LRT) )
C
C  ---------------------------------------------------------------------
C  TEST FOR CONVERGENCE.  IF THE LEAST (ADJUSTED) MULTIPLIER IS GREATER
C  THAN A SMALL NEGATIVE QUANTITY, AN ADEQUATE  LP  SOLUTION HAS BEEN
C  FOUND.
C  ---------------------------------------------------------------------
      IF (SMLLST .GE. ( - DINKY )) JSMLST = 0
      IF (JSMLST .EQ. 0)               GO TO 200
      IF (VERTEX  .AND.  NCOLZ .GE. 1) GO TO 200
C
C  PREPARE TO DELETE THE CONSTRAINT WITH INDEX  JSMLST.
C
      JDEL   = JSMLST
      KDEL   = KSMLST
      ISDEL  = ISTATE(JDEL)
      ISTATE(JDEL) = 0
      GO TO 220
C
C  ---------------------------------------------------------------------
C  IF STILL INFEASIBLE, WE CAN REDUCE THE SUM OF INFEASIBILITIES
C  IF THERE IS A MULTIPLIER GREATER THAN ONE.
C  ---------------------------------------------------------------------
C  INSTEAD OF LOOKING FOR THE LAST VIOLATED CONSTRAINT IN BNDALF,
C  WE MUST NOW LOOK FOR THE FIRST VIOLATED CONSTRAINT ALONG  P.
C  THIS WILL ENSURE THAT THE WEIGHTED SUM OF INFEASIBILITIES DECREASES.
C
  200 IF (NUMINF .EQ. 0  .OR.  .NOT. MINSUM) GO TO 800
C
C  FIND THE BIGGEST MULTIPLIER LARGER THAN UNITY.
C  FOR THE PURPOSES OF THE TEST,  THE  J-TH  MULTIPLIER IS SCALED
C  BY  FEATOL(J)/FEAMIN.  THIS FORCES CONSTRAINTS WITH LARGER  FEATOL
C  VALUES TO BE DELETED FIRST.
C
      CALL LPBGST( N, NACTIV, NCTOTL, NFREE, JBIGST, KBIGST,
     *             ISTATE, KACTIV,
     *             DINKY, FEAMIN, TRULAM, FEATOL, W(LRLAM) )
C
      IF (JBIGST .EQ. 0) GO TO 800
      JDEL   = JBIGST
      KDEL   = KBIGST
      ISDEL  = ISTATE(JBIGST)
      IF (TRULAM .LE. ZERO) IS = - 1
      IF (TRULAM .GT. ZERO) IS = - 2
      ISTATE(JBIGST) = IS
      FIRSTV = .TRUE.
C
C  ---------------------------------------------------------------------
C  UPDATE THE  TQ  FACTORIZATION OF THE MATRIX OF CONSTRAINTS IN THE
C  WORKING SET.
C  ---------------------------------------------------------------------
  220 NDEL   = NDEL + 1
      CALL DELCON( MODFYG, ORTHOG, UNITQ,
     *             JDEL, KDEL, NACTIV, NCOLZ, NFREE,
     *             N, NQ, NROWA, NROWRT, NCOLRT,
     *             KACTIV, KFREE,
     *             A, W(LQTG), W(LRT), W(LZY) )
C
      NCOLZ  = NCOLZ + 1
      IF (JDEL .LE. N) NFREE  = NFREE  + 1
      IF (JDEL .GT. N) NACTIV = NACTIV - 1
      GO TO 100
C
C  ---------------------------------------------------------------------
C  COMPUTE THE SEARCH DIRECTION,  P = - Z*(PROJECTED GRADIENT).
C  ---------------------------------------------------------------------
  300 IF (ITER .GE. ITMAX) GO TO 940
      ITER   = ITER + 1
      IF (ITER .GE. ISTART) MSG = MSGLVL
C
      CALL FINDP ( NULLR, UNITPG, UNITQ,
     *             N, NCLIN, NCLIN0, NCTOTL, NQ,
     *             NROWA, NROWRT, NCOLRT, NCOLZ, NCOLZ, NFREE,
     *             ISTATE, KFREE,
     *             DINKY, GTP, PNORM, RDLAST, ZTGNRM,
     *             A, W(LAP), W(LPX), W(LQTG), W(LRT), W(LWRK),
     *             W(LZY), W(LWRK) )
C
C  ---------------------------------------------------------------------
C  FIND THE CONSTRAINT WE BUMP INTO ALONG  P.
C  UPDATE  X  AND  AX  IF THE STEP  ALFA  IS NONZERO.
C  ---------------------------------------------------------------------
C
C  ALFA  IS INITIALIZED TO  BIGALF.  IF IT REMAINS THAT WAY AFTER
C  THE CALL TO BNDALF, IT WILL BE REGARDED AS INFINITE.
C
      BIGALF = QUOTNT( BIGDX, PNORM )
C
      CALL BNDALF( FIRSTV, HITLOW, ISTATE, INFORM, JADD,
     *             N, NROWA, NCLIN, NCLIN0, NCTOTL, NUMINF,
     *             ALFA, PALFA, ATPHIT, BIGALF, BIGBND, PNORM,
     *             W(LANORM), W(LAP), AX, BL, BU, FEATOL, W(LPX), X )
C
      IF (INFORM .NE. 0  .OR.  JADD .EQ. 0) GO TO 820
C
C  TEST IF  ALFA*PNORM  IS NEGLIGIBLE.
C
      STALL  = DABS( ALFA*PNORM ) .LE. EPSPT9*XNORM
      IF (.NOT. STALL) GO TO 410
C
C  TAKE A ZERO STEP.
C  IF A NON-ORTHOGONAL  TQ  FACTORIZATION IS BEING RECURRED AND  X  IS
C  NOT YET FEASIBLE,  THE GRADIENT OF THE SUM OF INFEASIBILITIES MUST BE
C  RECOMPUTED.
C
      ALFA   = ZERO
      NSTALL = NSTALL + 1
      MSTALL = 50
      IF (NSTALL .LE. MSTALL  .AND.        ORTHOG) GO TO 500
      IF (NSTALL .LE. MSTALL  .AND.  .NOT. ORTHOG) GO TO 420
      GO TO 930
C
C  CHANGE  X  TO  X + ALFA*P.  UPDATE  AX  ALSO.
C
  410 NSTALL = 0
C
      CALL AXPY  ( N    , ALFA, W(LPX), N    , 1, X , N    , 1 )
      IF (NCLIN .GT. 0)
     *CALL AXPY  ( NCLIN, ALFA, W(LAP), NCLIN, 1, AX, NCLIN, 1 )
C
      XNORM  = V2NORM( N, X, N, 1 )
C
      IF (LP) OBJLP = DOT( N, CVEC, N, 1, X, N, 1 )
C
C  IF  X  IS NOT YET FEASIBLE,  COMPUTE  OBJ  AND  GRAD  AS THE VALUE
C  AND GRADIENT OF THE SUM OF INFEASIBILITIES (IF  X  IS FEASIBLE, THE
C  VECTOR  QTG  IS UPDATED AND  GRAD  NEED NOT BE COMPUTED).
C
  420 IF (NUMINF .EQ. 0) GO TO 500
C
      CALL LPGRAD( LP, N, NCTOTL, NROWA,
     *             BIGBND, FEAMIN, NUMINF, SUMINF,
     *             ISTATE, A, BL, BU, CVEC, FEATOL, W(LQTG), X )
C
      KGFIX = LQTG + JADD - 1
      IF (.NOT. ORTHOG .AND. JADD .LE. N)  WGFIX = W(KGFIX)
C
      CALL ZYPROD( 6, N, NACTIV, NCOLZ, NFREE, NQ, UNITQ,
     *             KACTIV, KFREE, W(LQTG), W(LZY), W(LWRK) )
C
      OBJ    = SUMINF
C
C  ---------------------------------------------------------------------
C  ADD A CONSTRAINT TO THE WORKING SET.
C  ---------------------------------------------------------------------
C  UPDATE  ISTATE.
C
  500 IF (LP  .AND.  NUMINF .EQ. 0) OBJ = OBJLP
      IF (      HITLOW)           ISTATE(JADD) = 1
      IF (.NOT. HITLOW)           ISTATE(JADD) = 2
      IF (BL(JADD) .EQ. BU(JADD)) ISTATE(JADD) = 3
C
C  IF A BOUND IS TO BE ADDED, MOVE  X  EXACTLY ONTO IT, EXCEPT WHEN
C  A NEGATIVE STEP WAS TAKEN.  (BNDALF  MAY HAVE HAD TO MOVE TO SOME
C  OTHER CLOSER CONSTRAINT.)
C
      IADD = JADD - N
      IF (JADD .GT. N) GO TO 520
      IF (      HITLOW) BND = BL(JADD)
      IF (.NOT. HITLOW) BND = BU(JADD)
      IF (ALFA .GE. ZERO) X(JADD) = BND
C
      DO 510 IFIX = 1, NFREE
         IF (KFREE(IFIX) .EQ. JADD) GO TO 520
  510 CONTINUE
C
C  UPDATE THE  TQ  FACTORS OF THE MATRIX OF CONSTRAINTS IN THE WORKING
C  SET.  USE THE ARRAY  P  AS WORK SPACE.
C
  520 ADDED  = .TRUE.
      NDEL   = 0
      CALL ADDCON( MODFYG, .FALSE., ORTHOG, UNITQ, INFORM,
     *             IFIX, IADD, JADD, NACTIV, NCOLZ, NCOLZ, NFREE,
     *             N, NQ, NROWA, NROWRT, NCOLRT, KFREE,
     *             CONDMX, CSLAST, SNLAST,
     *             A, W(LQTG), W(LRT), W(LZY), W(LWRK), W(LPX) )
C
      NCOLZ  = NCOLZ - 1
      NFIXED = N - NFREE
      IF (NFIXED .EQ. 0) GO TO 540
      KB     = NACTIV + NFIXED
      DO 530 IDUMMY = 1, NFIXED
         KACTIV(KB+1) = KACTIV(KB)
         KB           = KB - 1
  530 CONTINUE
  540 IF (JADD .GT. N) GO TO 550
C
C  ADD A BOUND.  IF STABILIZED ELIMINATIONS ARE BEING USED TO UPDATE
C  THE  TQ  FACTORIZATION,  RECOMPUTE THE COMPONENT OF THE GRADIENT
C  CORRESPONDING TO THE NEWLY FIXED VARIABLE.
C
      NFREE  = NFREE  - 1
      KACTIV(NACTIV+1) = JADD
      IF (ORTHOG) GO TO 100
C
      KGFIX    = LQTG + NFREE
      IF (LP  .AND.  NUMINF .EQ. 0)  W(KGFIX) = CVEC(JADD)
      IF (           NUMINF .GT. 0)  W(KGFIX) = WGFIX
      GO TO 100
C
C  ADD A GENERAL LINEAR CONSTRAINT.
C
  550 NACTIV = NACTIV + 1
      KACTIV(NACTIV)   = IADD
      GO TO 100
C
C  .........................END OF MAIN LOOP............................
C
C
C  NO CONSTRAINTS TO DROP.
C
  800 IF (NUMINF .GT. 0) GO TO 910
      GO TO 900
C
C  ERROR IN  BNDALF  --  PROBABLY UNBOUNDED LP.
C
  820 IF (NUMINF .EQ. 0) GO TO 920
      GO TO 910
C
C  FEASIBLE SOLUTION FOUND, OR OPTIMAL LP SOLUTION.
C
  900 INFORM = 0
      GO TO 950
C
C  THE LINEAR CONSTRAINTS AND BOUNDS APPEAR TO BE INFEASIBLE.
C
  910 INFORM = 1
      GO TO 950
C
C  UNBOUNDED LP.
C
  920 INFORM = 2
      GO TO 950
C
C  TOO MANY ITERATIONS WITHOUT CHANGING  X.
C
  930 INFORM = 3
      GO TO 950
C
C  TOO MANY ITERATIONS.
C
  940 INFORM = 4
C
C  ---------------------------------------------------------------------
C  PRINT FULL SOLUTION.  IF NECESSARY, RECOMPUTE THE MULTIPLIERS.
C  ---------------------------------------------------------------------
  950 MSG    = MSGLVL
      IF (MSG .GE. 1) WRITE (NOUT, 2000) INFORM, ITER
C
      IF (INFORM .GT. 0)
     *CALL GETLAM( LPROB, N, NCLIN0, NCTOTL,
     *             NACTIV, NCOLZ, NFREE, NROWA,
     *             NROWRT, NCOLRT, JSMLST, KSMLST, SMLLST,
     *             ISTATE, KACTIV,
     *             A, W(LANORM), W(LQTG), W(LRLAM), W(LRT) )
      IF (.NOT. LP  .AND.  INFORM .EQ. 0)
     *             CALL ZEROVC( N, W(LRLAM), N, 1 )
C
      CALL PRTSOL( NFREE, NROWA, NROWJ,
     *             N, NCLIN, NCNLN, NCTOTL, BIGBND,
     *             NAMED, IW(LNAMES), LENNAM,
     *             NACTIV, ISTATE, KACTIV,
     *             A, BL, BU, X, CLAMDA, W(LRLAM), X )
C
      RETURN
C
 1100 FORMAT(/ 34H //LPCORE//      ZTGNRM      DINKY
     *       / 11H //LPCORE//, 1P2E11.2 )
 2000 FORMAT(/ 26H EXIT LP PHASE.   INFORM =, I3, 9H   ITER =, I4)
C
C  END OF LPCORE
      END
