      SUBROUTINE QPCORE( NAMED, ORTHOG, UNITQ, INFORM, ITER, ITMAX,
     *                   N, NCLIN, NCTOTL, NROWA, NROWH, NCOLH,
     *                   NACTIV, NFREE, QPHESS, ISTATE, KACTIV, KFREE,
     *                   OBJQP, XNORM,
     *                   A, AX, BL, BU, CLAMDA, CVEC,
     *                   FEATOL, HESS, SCALE, X, IW, LIW, W, LW )
C
C     IMPLICIT           REAL*8(A-H,O-Z)
      INTEGER            INFORM, ITER, ITMAX, N, NCLIN, NCTOTL, NROWA,
     *                   NROWH, NCOLH, NACTIV, NFREE, LIW, LW
      INTEGER            ISTATE(NCTOTL), KACTIV(N), KFREE(N)
      INTEGER            IW(LIW)
      DOUBLE PRECISION   ASIZE, DTMAX, DTMIN, OBJQP, XNORM
      DOUBLE PRECISION   A(NROWA,N), AX(NROWA), BL(NCTOTL), BU(NCTOTL),
     *                   CLAMDA(NCTOTL), CVEC(N), FEATOL(NCTOTL),
     *                   HESS(NROWH,NCOLH), SCALE(NCTOTL), X(N)
      DOUBLE PRECISION   W(LW)
      LOGICAL            NAMED, ORTHOG, UNITQ
      EXTERNAL           QPHESS
C
      INTEGER            NOUT, MSG, ISTART, LENNAM, NROWRT, NCOLRT, NQ
      DOUBLE PRECISION   PARM, WMACH
      COMMON    /SOLMCH/ WMACH(15)
      COMMON    /SOL1CM/ NOUT, MSG, ISTART
      COMMON    /SOL3CM/ LENNAM, NROWRT, NCOLRT, NQ
      COMMON    /SOL4CM/ PARM(10)
      COMMON    /SOL5CM/ ASIZE, DTMAX, DTMIN
C
      INTEGER            LOCLP
      COMMON    /SOL1LP/ LOCLP(15)
C
C  *********************************************************************
C  QPCORE, A SUBROUTINE FOR INDEFINITE QUADRATIC PROGRAMMING.
C  IT IS ASSUMED THAT A PREVIOUS CALL TO EITHER  LPCORE  OR  QPCORE
C  HAS DEFINED AN INITIAL WORKING SET OF LINEAR CONSTRAINTS AND BOUNDS.
C  ISTATE, KACTIV  AND  KFREE  WILL HAVE BEEN SET ACCORDINGLY,
C  AND THE ARRAYS  RT  AND  ZY  WILL CONTAIN THE TQ FACTORIZATION
C  OF THE MATRIX WHOSE ROWS ARE THE GRADIENTS OF THE ACTIVE LINEAR
C  CONSTRAINTS WITH THE COLUMNS CORRESPONDING TO THE ACTIVE BOUNDS
C  REMOVED.  THE TQ FACTORIZATION OF THE RESULTING (NACTIV BY NFREE)
C  MATRIX IS  A(FREE)*Q = (0 T),  WHERE  Q  IS (NFREE BY NFREE) AND  T
C  IS REVERSE-TRIANGULAR.
C
C  VALUES OF ISTATE(J) FOR THE LINEAR CONSTRAINTS.......
C
C  ISTATE(J)
C  ---------
C          0   CONSTRAINT  J  IS NOT IN THE WORKING SET.
C          1   CONSTRAINT  J  IS IN THE WORKING SET AT ITS LOWER BOUND.
C          2   CONSTRAINT  J  IS IN THE WORKING SET AT ITS UPPER BOUND.
C          3   CONSTRAINT  J  IS IN THE WORKING SET AS AN EQUALITY.
C          4   THE J-TH VARIABLE IS TEMPORARILY FIXED AT THE VALUE X(J).
C              THE CORRESPONDING ARTIFICIAL BOUND IS INCLUDED IN THE
C              WORKING SET (THE  TQ  FACTORIZATION IS ADJUSTED
C              ACCORDINGLY).
C
C  CONSTRAINT  J  MAY BE VIOLATED BY AS MUCH AS  FEATOL(J).
C
C  SYSTEMS OPTIMIZATION LABORATORY, STANFORD UNIVERSITY.
C  VERSION 1   OF DECEMBER 1981.
C  VERSION 2   OF     JUNE 1982.
C  VERSION 3   OF  JANUARY 1983.
C  VERSION 3.1 OF    APRIL 1983.
C  VERSION 3.2 OF    APRIL 1984.
C
C  COPYRIGHT  1983  STANFORD UNIVERSITY.
C
C  THIS MATERIAL MAY BE REPRODUCED BY OR FOR THE U.S. GOVERNMENT PURSU-
C  ANT TO THE COPYRIGHT LICENSE UNDER DAR CLAUSE 7-104.9(A) (1979 MAR).
C
C  THIS MATERIAL IS BASED UPON WORK PARTIALLY SUPPORTED BY THE NATIONAL
C  SCIENCE FOUNDATION UNDER GRANTS MCS-7926009 AND ECS-8012974; THE
C  DEPARTMENT OF ENERGY CONTRACT AM03-76SF00326, PA NO. DE-AT03-
C  76ER72018; AND THE ARMY RESEARCH OFFICE CONTRACT DAA29-79-C-0110.
C
C  *********************************************************************
C
      INTEGER            IADD, IDUMMY, IFIX, ISDEL, ISSAVE, JADD, JDEL,
     *                   JDSAVE, JSMLST, KB, KDEL, KGFIX, KSMLST,
     *                   LANORM, LAP, LENR, LNAMES, LPROB, LPX, LQTG,
     *                   LRLAM, LROWA, LRT, LWRK, LZY, MODE, MSGLVL,
     *                   MSTALL, NCNLN, NCLIN0, NCOLR, NCOLZ, NFIXED,
     *                   NHESS, NROWJ, NSTALL, NUMINF
      INTEGER            MAX0
      DOUBLE PRECISION   ALFA, ALFHIT, ANORM, ATPHIT, BIGALF, BIGBND,
     *                   BIGDX, BND, CONDH, CONDMX, CONDT, CSLAST,
     *                   DINKY, DRMAX, DRMIN, EMAX, EPSMCH, EPSPT9,
     *                   FLMAX, GFIXED, GFNORM, GTP, HSIZE,
     *                   OBJSIZ, PALFA, PNORM, RDLAST, RTMAX, SMLLST,
     *                   SNLAST, ZTGNRM
      DOUBLE PRECISION   DSQRT, QUOTNT, V2NORM
      DOUBLE PRECISION   DABS, DMAX1
      LOGICAL            FIRSTV, HITLOW, MODFYG, MODFYR,
     *                   NOCURV, NULLR, POSDEF, REFINE, RENEWR, STALL,
     *                   UNCON, UNITPG, ZEROLM
      DOUBLE PRECISION   ZERO  , ONE
      DATA               ZERO  , ONE
     *                  /0.0D+0, 1.0D+0/
      DATA               LPROB     / 2HQP  /
      DATA               MSTALL    /  50   /
C
C  SPECIFY MACHINE-DEPENDENT PARAMETERS.
C
      EPSMCH = WMACH(3)
      FLMAX  = WMACH(7)
      RTMAX  = WMACH(8)
C
      LNAMES = LOCLP( 1)
      LANORM = LOCLP( 4)
      LAP    = LOCLP( 5)
      LPX    = LOCLP( 6)
      LQTG   = LOCLP( 7)
      LRLAM  = LOCLP( 8)
      LRT    = LOCLP( 9)
      LZY    = LOCLP(10)
      LWRK   = LOCLP(11)
C
C  INITIALIZE
C
      INFORM = 0
      ITER   = 0
      JADD   = 0
      JDEL   = 0
      JDSAVE = 0
      LROWA  = NROWA*(N - 1) + 1
      NCLIN0 = MAX0( NCLIN, 1 )
      NCNLN  = 0
      NCOLZ  = NFREE - NACTIV
      NROWJ  = 1
      NSTALL = 0
      NHESS  = 0
      NUMINF = 0
C
      MSGLVL = MSG
      MSG    = 0
      IF (ISTART .EQ. 0) MSG = MSGLVL
C
      BIGBND = PARM(1)
      BIGDX  = PARM(2)
      EPSPT9 = PARM(4)
C
      ALFA   = ZERO
      CONDMX = FLMAX
      DRMAX  = ONE
      DRMIN  = ONE
      EMAX   = ZERO
      HSIZE  = ONE
C
      FIRSTV = .FALSE.
      MODFYR = .TRUE.
      MODFYG = .TRUE.
      NOCURV = .FALSE.
      NULLR  = .FALSE.
      POSDEF = .TRUE.
      REFINE = .FALSE.
      STALL  = .TRUE.
      UNCON  = .FALSE.
      UNITPG = .FALSE.
      ZEROLM = .FALSE.
C
C  ---------------------------------------------------------------------
C  GIVEN THE  TQ  FACTORIZATION OF THE MATRIX OF CONSTRAINTS IN THE
C  WORKING SET, COMPUTE THE FOLLOWING QUANTITIES....
C  (1) THE CHOLESKY FACTOR  R,  OF  Z(T)HZ  (IF  Z(T)HZ  IS NOT POSITIVE
C      DEFINITE, FIND A POSITIVE-DEFINITE  (NCOLR)-TH  ORDER PRINCIPAL
C      SUBMATRIX OF  Z(T)H Z,
C  (2) THE  QP  OBJECTIVE FUNCTION,
C  (3) THE VECTOR  Q(FREE)(T)G(FREE),
C  (4) THE VECTOR  G(FIXED).
C
C  USE THE ARRAY  RLAM  AS TEMPORARY WORK SPACE.
C  ---------------------------------------------------------------------
      CALL QPCRSH( UNITQ, QPHESS, N, NCOLR, NCOLZ, NCTOTL, NFREE,
     *             NHESS, NQ, NROWH, NCOLH, NROWRT, NCOLRT,
     *             KFREE, HSIZE,
     *             HESS, W(LRT), SCALE, W(LZY), W(LRLAM), W(LWRK) )
C
      MODE  = 1
      CALL QPGRAD( MODE, UNITQ, QPHESS, N, NACTIV,
     *             NCTOTL, NFREE, NHESS, NQ, NROWH, NCOLH, JADD,
     *             KACTIV, KFREE, ALFA, OBJQP, GFIXED, GTP,
     *             CVEC, HESS, W(LPX), W(LQTG), SCALE, X,
     *             W(LZY), W(LWRK), W(LRLAM) )
C
C  .......................START OF THE MAIN LOOP........................
C
C  DURING THE MAIN LOOP, ONE OF THREE THINGS WILL HAPPEN
C  (  I) THE CONVERGENCE CRITERION WILL BE SATISFIED AND THE ALGORITHM
C        WILL TERMINATE.
C  ( II) A LINEAR CONSTRAINT WILL BE DELETED.
C  (III) A DIRECTION OF SEARCH WILL BE COMPUTED AND A CONSTRAINT MAY
C        BE ADDED TO THE WORKING SET (NOTE THAT A ZERO STEP MAY BE TAKEN
C        ALONG THE SEARCH DIRECTION).
C
C  THESE COMPUTATIONS OCCUR IN SECTIONS I, II, AND III OF THE MAIN LOOP.
C
C  ---------------------------------------------------------------------
C    ******* SECTION I.  TEST FOR CONVERGENCE **************************
C  ---------------------------------------------------------------------
C  COMPUTE THE NORMS OF THE PROJECTED GRADIENT AND THE GRADIENT WITH
C  RESPECT TO THE FREE VARIABLES.
C
  100 ZTGNRM = ZERO
      IF (NCOLR .GT. 0) ZTGNRM = V2NORM( NCOLR, W(LQTG), NCOLR, 1 )
      GFNORM = ZTGNRM
      IF (NFREE .GT. 0  .AND.  NACTIV .GT. 0)
     *                  GFNORM = V2NORM( NFREE, W(LQTG), NFREE, 1 )
C
C  DEFINE SMALL QUANTITIES THAT REFLECT THE MAGNITUDE OF  C,  X,  H
C  AND THE MATRIX OF CONSTRAINTS IN THE WORKING SET.
C
      OBJSIZ = (EPSMCH + DABS( OBJQP )) / (EPSMCH + XNORM)
      ANORM  = ZERO
      IF (NACTIV .GT. 0) ANORM = DABS( DTMAX )
      DINKY  = EPSPT9 * DMAX1( ANORM, OBJSIZ, GFNORM )
C
      IF (MSG .GE. 80) WRITE (NOUT, 9000) ZTGNRM, DINKY
C
C  ---------------------------------------------------------------------
C  PRINT THE DETAILS OF THIS ITERATION.
C  ---------------------------------------------------------------------
C  USE THE LARGEST AND SMALLEST DIAGONALS OF  R  TO ESTIMATE THE
C  CONDITION NUMBER OF THE PROJECTED HESSIAN MATRIX.
C
      CONDT  = QUOTNT( DTMAX, DTMIN )
C
      LENR   = NROWRT*NCOLR
      IF (NCOLR .GT. 0)
     *   CALL CONDVC( NCOLR, W(LRT), LENR, NROWRT + 1, DRMAX, DRMIN )
      CONDH  = QUOTNT( DRMAX, DRMIN )
      IF (CONDH .GE. RTMAX) CONDH = FLMAX
      IF (CONDH .LT. RTMAX) CONDH = CONDH*CONDH
C
      CALL QPPRT ( ORTHOG, ISDEL, ITER, JADD, JDEL, NACTIV,
     *             NCOLR, NCOLZ, NFREE, N, NCLIN, NCLIN0, NCTOTL,
     *             NROWA, NROWRT, NCOLRT, NHESS,
     *             ISTATE, KFREE,
     *             ALFA, CONDH, CONDT, OBJQP, GFNORM, ZTGNRM, EMAX,
     *             A, W(LRT), X, W(LWRK), W(LAP) )
C
      JADD   = 0
      JDEL   = 0
C
      IF (.NOT. POSDEF) GO TO 300
      IF (ZTGNRM .LE. DINKY) UNITPG = .TRUE.
      IF (ZTGNRM .LE. DINKY) GO TO 110
C
      IF (.NOT. UNCON) REFINE = .FALSE.
      IF (.NOT. UNCON) GO TO 300
C
      IF (UNITPG) UNITPG = .FALSE.
C
      IF (ZTGNRM .LE. DSQRT(DINKY)) GO TO 110
C
      IF (REFINE) GO TO 110
C
      REFINE = .TRUE.
      GO TO 300
C
C  ---------------------------------------------------------------------
C  THE PROJECTED GRADIENT IS NEGLIGIBLE AND THE PROJECTED HESSIAN
C  IS POSITIVE DEFINITE.  IF  R  IS NOT COMPLETE IT MUST BE
C  EXPANDED.  OTHERWISE, IF THE CURRENT POINT IS NOT OPTIMAL,
C  A CONSTRAINT MUST BE DELETED FROM THE WORKING SET.
C  ---------------------------------------------------------------------
  110 ALFA   = ZERO
      UNCON  = .FALSE.
      REFINE = .FALSE.
      JDEL   = - (NCOLR + 1)
      IF (NCOLR .LT. NCOLZ) GO TO 220
C
      CALL GETLAM( LPROB, N, NCLIN0, NCTOTL,
     *             NACTIV, NCOLZ, NFREE, NROWA,
     *             NROWRT, NCOLRT, JSMLST, KSMLST, SMLLST,
     *             ISTATE, KACTIV,
     *             A, W(LANORM), W(LQTG), W(LRLAM), W(LRT) )
C
C  ---------------------------------------------------------------------
C  TEST FOR CONVERGENCE.  IF THE LEAST (ADJUSTED) MULTIPLIER IS GREATER
C  THAN THE SMALL POSITIVE QUANTITY  DINKY,  AN ADEQUATE SOLUTION HAS
C  BEEN FOUND.
C  ---------------------------------------------------------------------
      IF (SMLLST .GT. DINKY) GO TO 900
C
C  ---------------------------------------------------------------------
C    ******* SECTION II.  DELETE A CONSTRAINT FROM THE WORKING SET *****
C  ---------------------------------------------------------------------
C  DELETE THE CONSTRAINT WITH THE LEAST (ADJUSTED) MULTIPLIER.
C
C  FIRST CHECK IF THERE ARE ANY TINY MULTIPLIERS
C
      IF (SMLLST .GT. ( - DINKY )) ZEROLM = .TRUE.
      JDEL   = JSMLST
      JDSAVE = JSMLST
      KDEL   = KSMLST
      ISDEL  = ISTATE(JDEL)
      ISSAVE = ISDEL
      ISTATE(JDEL) = 0
C
C  UPDATE THE  TQ  FACTORIZATION OF THE MATRIX OF CONSTRAINTS IN THE
C  WORKING SET.
C
      CALL DELCON( MODFYG, ORTHOG, UNITQ,
     *             JDEL, KDEL, NACTIV, NCOLZ, NFREE,
     *             N, NQ, NROWA, NROWRT, NCOLRT,
     *             KACTIV, KFREE,
     *             A, W(LQTG), W(LRT), W(LZY) )
C
      NCOLZ  = NCOLZ + 1
      IF (JDEL .LE. N) NFREE  = NFREE  + 1
      IF (JDEL .GT. N) NACTIV = NACTIV - 1
C
C  ---------------------------------------------------------------------
C  THE PROJECTED HESSIAN IS EXPANDED BY A ROW AND COLUMN.  COMPUTE THE
C  ELEMENTS OF THE NEW COLUMN OF THE CHOLESKY FACTOR  R.
C  USE THE ARRAY  P  AS TEMPORARY WORK SPACE.
C  ---------------------------------------------------------------------
  220 RENEWR = .TRUE.
      NCOLR  = NCOLR + 1
      CALL QPCOLR( NOCURV, POSDEF, RENEWR, UNITQ, QPHESS,
     *             N, NCOLR, NCTOTL, NFREE, NQ, NROWH, NCOLH,
     *             NROWRT, NCOLRT, NHESS, KFREE,
     *             CSLAST, SNLAST, DRMAX, EMAX, HSIZE, RDLAST,
     *             HESS, W(LRT), SCALE, W(LZY), W(LPX), W(LWRK) )
C
C  REPEAT THE MAIN LOOP.
C
      GO TO 100
C
C  ---------------------------------------------------------------------
C    ******* SECTION III.  COMPUTE THE SEARCH DIRECTION *******
C  ---------------------------------------------------------------------
C  FIRST, CHECK FOR A WEAK LOCAL MINIMUM. EXIT IF THE NORM OF THE
C  PROJECTED GRADIENT IS SMALL AND THE CURVATURE ALONG  P  IS NOT
C  SIGNIFICANT.  ALSO, CHECK FOR TOO MANY ITERATIONS AND UPDATE THE
C  ITERATION COUNT.  THE ITERATION COUNTER IS ONLY UPDATED WHEN A SEARCH
C  DIRECTION IS COMPUTED.
C
  300 IF(ZTGNRM .LT. DINKY .AND. NCOLR .EQ. NCOLZ .AND. NOCURV)GO TO 910
      IF (ZEROLM             .AND.  NOCURV) GO TO 910
      IF (ITER .GE. ITMAX)                  GO TO 950
      ITER   = ITER + 1
      IF (ITER .GE. ISTART) MSG = MSGLVL
C
      CALL FINDP ( NULLR, UNITPG, UNITQ,
     *             N, NCLIN, NCLIN0, NCTOTL, NQ,
     *             NROWA, NROWRT, NCOLRT, NCOLR, NCOLZ, NFREE,
     *             ISTATE, KFREE,
     *             DINKY, GTP, PNORM, RDLAST, ZTGNRM,
     *             A, W(LAP), W(LPX), W(LQTG), W(LRT), W(LWRK),
     *             W(LZY), W(LWRK) )
C
C  IF A CONSTRAINT HAS JUST BEEN DELETED AND THE PROJECTED GRADIENT IS
C  SMALL (THIS CAN ONLY OCCUR HERE WHEN THE PROJECTED HESSIAN IS
C  INDEFINITE), THE SIGN OF  P  MAY BE INCORRECT BECAUSE OF ROUNDING
C  ERRORS IN THE COMPUTATION OF  ZTG.  FIX THE SIGN OF  P  BY FORCING IT
C  TO SATISFY THE CONSTRAINT THAT WAS JUST DELETED.
C
      IF ((JDSAVE .GT. 0  .AND.  ZTGNRM .LE. DINKY)  .OR.  ZEROLM)
     *CALL QPCHKP( N, NCLIN, NCLIN0, ISSAVE, JDSAVE, W(LAP), W(LPX) )
C
C  ---------------------------------------------------------------------
C  FIND THE CONSTRAINT WE BUMP INTO ALONG P.
C  UPDATE X AND A*X IF THE STEP ALFA IS NONZERO.
C  ---------------------------------------------------------------------
C  ALFHIT  IS INITIALIZED TO  BIGALF.  IF IT REMAINS THAT WAY AFTER
C  THE CALL TO BNDALF, IT WILL BE REGARDED AS INFINITE.
C
      BIGALF = QUOTNT( BIGDX, PNORM )
C
      CALL BNDALF( FIRSTV, HITLOW, ISTATE, INFORM, JADD,
     *             N, NROWA, NCLIN, NCLIN0, NCTOTL, NUMINF,
     *             ALFHIT, PALFA, ATPHIT, BIGALF, BIGBND, PNORM,
     *             W(LANORM), W(LAP), AX, BL, BU, FEATOL, W(LPX), X )
C
C  IF THE PROJECTED HESSIAN IS POSITIVE DEFINITE, THE STEP  ALFA = 1.0
C  WILL BE THE STEP TO THE MINIMUM OF THE QUADRATIC FUNCTION ON THE
C  CURRENT SUBSPACE.
C
      ALFA   = ONE
C
C  IF THE STEP TO THE MINIMUM ON THE SUBSPACE IS LESS THAN THE DISTANCE
C  TO THE NEAREST CONSTRAINT,  THE CONSTRAINT IS NOT ADDED TO THE
C  WORKING SET.
C
      UNCON  = PALFA .GT. ONE  .AND.  POSDEF
      IF (      UNCON) JADD = 0
      IF (.NOT. UNCON) ALFA = ALFHIT
C
C  CHECK FOR AN UNBOUNDED SOLUTION.
C
      IF (ALFA .GE. BIGALF) GO TO 920
C
C  TEST IF THE CHANGE IN  X  IS NEGLIGIBLE.
C
      STALL  = DABS( ALFA*PNORM ) .LE. EPSPT9*XNORM
      IF (.NOT. STALL) GO TO 410
C
C  TAKE A ZERO STEP.
C  EXIT IF MORE THAN  50  ITERATIONS OCCUR WITHOUT CHANGING  X.  IF SUCH
C  AN EXIT IS MADE WHEN THERE ARE SOME NEAR-ZERO MULTIPLIERS, THE USER
C  SHOULD CALL A SEPARATE ROUTINE THAT CHECKS THE SOLUTION.
C
      ALFA   = ZERO
      NSTALL = NSTALL + 1
      IF (NSTALL .LE. MSTALL) GO TO 420
      GO TO 940
C
C  ---------------------------------------------------------------------
C  COMPUTE THE NEW VALUE OF THE QP OBJECTIVE FUNCTION.  IF ITS VALUE HAS
C  NOT INCREASED,  UPDATE  OBJQP,  Q(FREE)(T)G(FREE)  AND  G(FIXED).
C  AN INCREASE IN THE OBJECTIVE CAN OCCUR ONLY AFTER A MOVE ALONG
C  A DIRECTION OF NEGATIVE CURVATURE FROM A POINT WITH TINY MULTIPLIERS.
C  USE THE ARRAY  RLAM  AS TEMPORARY STORAGE.
C  ---------------------------------------------------------------------
  410 MODE  = 2
      CALL QPGRAD( MODE, UNITQ, QPHESS, N, NACTIV,
     *             NCTOTL, NFREE, NHESS, NQ, NROWH, NCOLH, JADD,
     *             KACTIV, KFREE, ALFA, OBJQP, GFIXED, GTP,
     *             CVEC, HESS, W(LPX), W(LQTG), SCALE, X,
     *             W(LZY), W(LWRK), W(LRLAM) )
C
      IF (MODE .LT. 0) GO TO 910
C
C  CHANGE  X  TO  X + ALFA*P.  UPDATE  AX  ALSO.
C  WE NO LONGER NEED TO REMEMBER JDSAVE, THE LAST CONSTRAINT DELETED.
C
      NSTALL = 0
      JDSAVE = 0
      ZEROLM = .FALSE.
C
      CALL AXPY  ( N    , ALFA, W(LPX), N    , 1, X , N    , 1 )
      IF (NCLIN .GT. 0)
     *CALL AXPY  ( NCLIN, ALFA, W(LAP), NCLIN, 1, AX, NCLIN, 1 )
C
      XNORM  = V2NORM( N, X, N, 1 )
C
C  IF AN UNCONSTRAINED STEP WAS TAKEN, REPEAT THE MAIN LOOP.
C
  420 IF (UNCON) GO TO 100
C
C  ---------------------------------------------------------------------
C  ADD A CONSTRAINT TO THE WORKING SET.
C  ---------------------------------------------------------------------
C  UPDATE  ISTATE.
C
      IF (      HITLOW)           ISTATE(JADD) = 1
      IF (.NOT. HITLOW)           ISTATE(JADD) = 2
      IF (BL(JADD) .EQ. BU(JADD)) ISTATE(JADD) = 3
C
C  IF A BOUND IS TO BE ADDED, MOVE  X  EXACTLY ONTO IT, EXCEPT WHEN
C  A NEGATIVE STEP WAS TAKEN.  (BNDALF  MAY HAVE HAD TO MOVE TO SOME
C  OTHER CLOSER CONSTRAINT.)
C
      IADD = JADD - N
      IF (JADD .GT. N) GO TO 520
      IF (      HITLOW) BND = BL(JADD)
      IF (.NOT. HITLOW) BND = BU(JADD)
      IF (ALFA .GE. ZERO) X(JADD) = BND
C
      DO 510 IFIX = 1, NFREE
         IF (KFREE(IFIX) .EQ. JADD) GO TO 520
  510 CONTINUE
C
C  UPDATE THE  TQ  FACTORS OF THE MATRIX OF CONSTRAINTS IN THE WORKING
C  SET.  USE THE ARRAY  P  AS TEMPORARY WORK SPACE.
C
  520 CALL ADDCON( MODFYG, MODFYR, ORTHOG, UNITQ, INFORM,
     *             IFIX, IADD, JADD, NACTIV, NCOLR, NCOLZ, NFREE,
     *             N, NQ, NROWA, NROWRT, NCOLRT, KFREE,
     *             CONDMX, CSLAST, SNLAST,
     *             A, W(LQTG), W(LRT), W(LZY), W(LWRK), W(LPX) )
C
      NCOLR  = NCOLR - 1
      NCOLZ  = NCOLZ - 1
      NFIXED = N     - NFREE
      IF (NFIXED .EQ. 0) GO TO 540
      KB     = NACTIV + NFIXED
      DO 530 IDUMMY = 1, NFIXED
         KACTIV(KB+1) = KACTIV(KB)
         KB           = KB - 1
  530 CONTINUE
  540 IF (JADD .GT. N) GO TO 550
C
C  ADD A BOUND.  IF STABILIZED ELIMINATIONS ARE BEING USED TO UPDATE
C  THE  TQ  FACTORIZATION,  RECOMPUTE THE COMPONENT OF THE GRADIENT
C  CORRESPONDING TO THE NEWLY FIXED VARIABLE.
C  USE THE ARRAY  P  AS TEMPORARY WORK SPACE.
C
      NFREE  = NFREE  - 1
      KACTIV(NACTIV+1) = JADD
      IF (ORTHOG) GO TO 560
C
      KGFIX  = LQTG + NFREE
      MODE   = 3
      CALL QPGRAD( MODE, UNITQ, QPHESS, N, NACTIV,
     *             NCTOTL, NFREE, NHESS, NQ, NROWH, NCOLH, JADD,
     *             KACTIV, KFREE, ALFA, OBJQP, W(KGFIX), GTP,
     *             CVEC, HESS, W(LPX), W(LQTG), SCALE, X,
     *             W(LZY), W(LWRK), W(LPX) )
C
      GO TO 560
C
C  ADD A GENERAL LINEAR CONSTRAINT.
C
  550 NACTIV = NACTIV + 1
      KACTIV(NACTIV) = IADD
C
C  REPEAT THE MAIN LOOP IF THE PROJECTED HESSIAN THAT WAS USED TO
C  COMPUTE THIS SEARCH DIRECTION WAS POSITIVE DEFINITE.
C
  560 IF (NCOLR .EQ. 0) POSDEF = .TRUE.
      IF (NCOLR .EQ. 0) EMAX   = ZERO
C
C  ---------------------------------------------------------------------
C  THE PROJECTED HESSIAN WAS NOT SUFFICIENTLY POSITIVE DEFINITE BEFORE
C  THE CONSTRAINT WAS ADDED.  EITHER COMPUTE THE TRUE VALUE OF THE LAST
C  DIAGONAL OF  R  OR  RECOMPUTE THE WHOLE OF ITS LAST COLUMN.
C  USE THE ARRAY  RLAM  AS TEMPORARY WORK SPACE.
C  ---------------------------------------------------------------------
      IF (.NOT. POSDEF)
     *CALL QPCOLR( NOCURV, POSDEF, RENEWR, UNITQ, QPHESS,
     *             N, NCOLR, NCTOTL, NFREE, NQ, NROWH, NCOLH,
     *             NROWRT, NCOLRT, NHESS, KFREE,
     *             CSLAST, SNLAST, DRMAX, EMAX, HSIZE, RDLAST,
     *             HESS, W(LRT), SCALE, W(LZY), W(LRLAM), W(LWRK) )
C
C  REPEAT THE MAIN LOOP.
C
      GO TO 100
C
C  .........................END OF MAIN LOOP............................
C
C  OPTIMAL QP SOLUTION FOUND.
C
  900 INFORM = 0
      GO TO 960
C
C  WEAK LOCAL MINIMUM.
C
  910 INFORM = 1
      GO TO 960
C
C  UNBOUNDED QP.
C
  920 INFORM = 2
      GO TO 960
C
C  UNABLE TO VERIFY OPTIMALITY OF A STATIONARY POINT WITH TINY OR
C  ZERO MULTIPLIERS.
C
  930 INFORM = 3
      GO TO 960
C
C  TOO MANY ITERATIONS WITHOUT CHANGING X.
C
  940 IF (ZEROLM) GO TO 930
      INFORM = 4
      GO TO 960
C
C  TOO MANY ITERATIONS.
C
  950 INFORM = 5
C
C  PRINT FULL SOLUTION.
C
  960 MSG    = MSGLVL
      IF (MSG .GE. 1) WRITE (NOUT, 1000) INFORM, ITER
C
      IF (INFORM .GT. 0)
     *CALL GETLAM( LPROB, N, NCLIN0, NCTOTL,
     *             NACTIV, NCOLZ, NFREE, NROWA,
     *             NROWRT, NCOLRT, JSMLST, KSMLST, SMLLST,
     *             ISTATE, KACTIV,
     *             A, W(LANORM), W(LQTG), W(LRLAM), W(LRT) )
C
      CALL PRTSOL( NFREE, NROWA, NROWJ,
     *             N, NCLIN, NCNLN, NCTOTL, BIGBND,
     *             NAMED, IW(LNAMES), LENNAM,
     *             NACTIV, ISTATE, KACTIV,
     *             A, BL, BU, X, CLAMDA, W(LRLAM), X )
C
      RETURN
C
 1000 FORMAT(/ 26H EXIT QP PHASE.   INFORM =, I3, 9H   ITER =, I4)
 9000 FORMAT(/ 34H //QPCORE//      ZTGNRM      DINKY
     *       / 11H //QPCORE//, 1P2E11.2 )
C
C  END OF QPCORE
      END
