      SUBROUTINE QPSOL ( ITMAX, MSGLVL, N,
     *                   NCLIN, NCTOTL, NROWA, NROWH, NCOLH,
     *                   BIGBND, A, BL, BU, CVEC, FEATOL, HESS, QPHESS,
     *                   COLD, LP, ORTHOG, ISTATE, X,
     *                   INFORM, ITER, OBJ, CLAMDA,
     *                   IW, LENIW, W, LENW )
C
C     IMPLICIT           REAL*8(A-H,O-Z)
      INTEGER            ITMAX, MSGLVL, N, NCLIN, NCTOTL, NROWA,
     *                   NROWH, NCOLH, INFORM, ITER
      INTEGER            LENIW, LENW
      INTEGER            ISTATE(NCTOTL), IW(LENIW)
      DOUBLE PRECISION   BIGBND, OBJ
      DOUBLE PRECISION   A(NROWA,N), BL(NCTOTL), BU(NCTOTL)
      DOUBLE PRECISION   CLAMDA(NCTOTL), CVEC(N), FEATOL(NCTOTL)
      DOUBLE PRECISION   HESS(NROWH,NCOLH), X(N), W(LENW)
      LOGICAL            COLD, LP, ORTHOG
      EXTERNAL           QPHESS
C
C  *********************************************************************
C  QPSOL  SOLVES QUADRATIC PROGRAMMING (QP) PROBLEMS OF THE FORM
C
C                MINIMIZE     C(T)*X  +  1/2 X(T)*H*X
C
C                SUBJECT TO           (  X  )
C                             BL  .LE.(     ).GE.  BU
C                                     ( A*X )
C
C
C  WHERE  (T)  DENOTES THE TRANSPOSE OF A COLUMN VECTOR.
C  THE SYMMETRIC MATRIX  H  MAY BE POSITIVE-DEFINITE, POSITIVE
C  SEMI-DEFINITE, OR INDEFINITE.
C
C  N  IS THE NUMBER OF VARIABLES (DIMENSION OF  X).
C
C  NCLIN  IS THE NUMBER OF GENERAL LINEAR CONSTRAINTS (ROWS OF  A).
C  (NCLIN MAY BE ZERO.)
C
C  THE MATRIX   H  IS DEFINED BY THE SUBROUTINE  QPHESS, WHICH
C  MUST COMPUTE THE MATRIX-VECTOR PRODUCT  H*X  FOR ANY VECTOR  X.
C
C  THE VECTOR  C  IS ENTERED IN THE ONE-DIMENSIONAL ARRAY  CVEC.
C
C  THE FIRST  N  COMPONENTS OF  BL  AND   BU  ARE LOWER AND UPPER
C  BOUNDS ON THE VARIABLES.  THE NEXT  NCLIN  COMPONENTS ARE
C  LOWER AND UPPER BOUNDS ON THE GENERAL LINEAR CONSTRAINTS.
C
C  THE MATRIX  A  OF COEFFICIENTS IN THE GENERAL LINEAR CONSTRAINTS
C  IS ENTERED AS THE TWO-DIMENSIONAL ARRAY  A  (OF DIMENSION
C  NROWA  BY  N).  IF NCLIN = 0,  A  IS NOT ACCESSED.
C
C  THE VECTOR  X  MUST CONTAIN AN INITIAL ESTIMATE OF THE SOLUTION,
C  AND WILL CONTAIN THE COMPUTED SOLUTION ON OUTPUT.
C
C
C
C  COMPLETE DOCUMENTATION FOR  QPSOL  IS CONTAINED IN REPORT SOL 83-12,
C  USERS GUIDE FOR SOL/QPSOL, BY P.E. GILL, W. MURRAY, M.A. SAUNDERS
C  AND M.H. WRIGHT, DEPARTMENT OF OPERATIONS RESEARCH, STANFORD
C  UNIVERSITY, STANFORD, CALIFORNIA 94305.
C
C  SYSTEMS OPTIMIZATION LABORATORY, STANFORD UNIVERSITY.
C  VERSION 1   OF DECEMBER 1981.
C  VERSION 2   OF     JUNE 1982.
C  VERSION 3   OF  JANUARY 1983.
C  VERSION 3.1 OF    APRIL 1983.
C  VERSION 3.2 OF    JUNE  1984.
C
C  COPYRIGHT  1983  STANFORD UNIVERSITY.
C
C  THIS MATERIAL MAY BE REPRODUCED BY OR FOR THE U.S. GOVERNMENT PURSU-
C  ANT TO THE COPYRIGHT LICENSE UNDER DAR CLAUSE 7-104.9(A) (1979 MAR).
C
C  THIS MATERIAL IS BASED UPON WORK PARTIALLY SUPPORTED BY THE NATIONAL
C  SCIENCE FOUNDATION UNDER GRANTS MCS-7926009 AND ECS-8012974; THE
C  OFFICE OF NAVAL RESEARCH CONTRACT N00014-75-C-0267;  THE DEPARTMENT
C  OF ENERGY CONTRACT AM03-76SF00326, PA NO. DE-AT03-76ER72018; AND THE
C  ARMY RESEARCH OFFICE CONTRACT DAA29-79-C-0110.
C  *********************************************************************
C
C  COMMON BLOCKS.
C
      INTEGER            NOUT, MSG, ISTART, LENNAM, NROWRT, NCOLRT, NQ
      DOUBLE PRECISION   ASIZE, DTMAX, DTMIN
      DOUBLE PRECISION   WMACH, PARM
      COMMON    /SOLMCH/ WMACH(15)
      COMMON    /SOL1CM/ NOUT, MSG, ISTART
      COMMON    /SOL3CM/ LENNAM, NROWRT, NCOLRT, NQ
      COMMON    /SOL4CM/ PARM(10)
      COMMON    /SOL5CM/ ASIZE, DTMAX, DTMIN
C
      LOGICAL            SCLDQP
      INTEGER            LOCLP
      COMMON    /SOL1LP/ LOCLP(15)
      COMMON    /SOL2LP/ SCLDQP
C
C  INTRINSIC FUNCTIONS.
C
      INTEGER            MAX0, MIN0
C
C  LOCAL VARIABLES.
C
      LOGICAL            MINSUM, NAMED, UNITQ, VERTEX
      INTEGER            L, LAX, LCRASH, LITOTL, LKACTV, LKFREE,
     *                   LNAMES, LPX, LSCALE, LWRK, LWTOTL,
     *                   MAXACT, MXCOLZ, MXFREE, MINACT, MINFXD,
     *                   NACTIV, NALG, NCNLN, NERROR, NFREE,
     *                   NROWJ, NUMINF
      DOUBLE PRECISION   BIGDX, EPSMCH, EPSPT9, TOLACT, XNORM
      DOUBLE PRECISION   POINT9
      INTEGER            LPQP(2)
      DATA               LPQP(1), LPQP(2)
     *                  /2HLP   , 2HQP   /
      DATA               POINT9
     *                 / 0.9D+0 /
C
C  SET THE MACHINE-DEPENDENT CONSTANTS.
C
      CALL MCHPAR
      EPSMCH = WMACH( 3)
      NOUT   = WMACH(11)
C
C  QPSOL  WILL PROVIDE DEFAULT NAMES FOR VARIABLES DURING PRINTING.
C
      NAMED  = .FALSE.
C
C  IF THERE IS NO FEASIBLE POINT FOR THE LINEAR CONSTRAINTS AND BOUNDS,
C  COMPUTE THE MINIMUM SUM OF INFEASIBILITIES.
C  IT IS NOT NECESSARY TO START THE QP PHASE AT A VERTEX.
C
      MINSUM = .TRUE.
      VERTEX = .FALSE.
C
C  ANY CHANGE IN X THAT IS GREATER THAN  BIGDX  WILL BE REGARDED AS AN
C  INFINITE STEP.
C
      BIGDX  = 1.0D+20
C
C  DURING SELECTION OF THE INITIAL WORKING SET (BY CRASH),
C  CONSTRAINTS WITH RESIDUALS LESS THAN  TOLACT  WILL BE MADE ACTIVE.
C
      TOLACT = 0.01D+0
C
      EPSPT9 = EPSMCH**(POINT9)
C
      PARM(1) = BIGBND
      PARM(2) = BIGDX
      PARM(3) = TOLACT
      PARM(4) = EPSPT9
C
C  ASSIGN THE DIMENSIONS OF ARRAYS IN THE PARAMETER LIST OF QPCORE.
C  ECONOMIES OF STORAGE ARE POSSIBLE IF THE MINIMUM NUMBER OF ACTIVE
C  CONSTRAINTS AND THE MINIMUM NUMBER OF FIXED VARIABLES ARE KNOWN IN
C  ADVANCE.  THE EXPERT USER SHOULD ALTER  MINACT  AND  MINFXD
C  ACCORDINGLY.
C  IF A LINEAR PROGRAM IS BEING SOLVED AND THE MATRIX OF GENERAL
C  CONSTRAINTS IS FAT,  I.E.,  NCLIN .LT. N,  A NON-ZERO VALUE IS
C  KNOWN FOR  MINFXD.  NOTE THAT IN THIS CASE,  VERTEX  MUST BE .TRUE..
C
      MINACT = 0
      MINFXD = 0
C
      IF (LP  .AND.  NCLIN .LT. N) MINFXD = N - NCLIN - 1
      IF (LP  .AND.  NCLIN .LT. N) VERTEX = .TRUE.
C
      MXFREE = N - MINFXD
      MAXACT = MAX0( 1, MIN0( N, NCLIN ) )
      MXCOLZ = N - ( MINFXD + MINACT )
      NQ     = MAX0( 1, MXFREE )
      NROWRT = MAX0( MXCOLZ, MAXACT )
      NCOLRT = MAX0( 1, MXFREE )
C
      NCNLN  = 0
      LENNAM = 1
C
C  ALLOCATE CERTAIN ARRAYS THAT ARE NOT DONE IN  ALLOC.
C
      LNAMES = 1
      LITOTL = 0
C
      LAX    = 1
      LWTOTL = LAX    + NROWA  - 1
C
C  ALLOCATE REMAINING WORK ARRAYS.
C
      NALG   = 2
      LOCLP(1) = LNAMES
      CALL ALLOC ( NALG, N, NCLIN, NCNLN, NCTOTL, NROWA, NROWJ,
     *             LITOTL, LWTOTL )
C
      LKACTV = LOCLP( 2)
      LKFREE = LOCLP( 3)
C
      LPX    = LOCLP( 6)
      LWRK   = LOCLP(11)
C
C  SET THE MESSAGE LEVEL FOR  LPDUMP, QPDUMP, CHKDAT  AND  LPCORE.
C
      MSG    = 0
      IF (MSGLVL .GE.  5) MSG = 5
      IF (LP  .OR.  MSGLVL .GE. 15) MSG = MSGLVL
C
C  ******* THE FOLLOWING STATEMENT MUST BE EXECUTED IF  ISTART   *******
C  ******* IS NOT SET IN THE CALLING ROUTINE.                    *******
C
      ISTART = 0
C
      LCRASH = 1
      IF (COLD) LCRASH = 0
C
C  CHECK INPUT PARAMETERS AND STORAGE LIMITS.
C
      IF (MSGLVL .EQ. 99)
     *CALL LPDUMP( N, NCLIN, NCTOTL, NROWA,
     *             LCRASH, LP, MINSUM, NAMED, VERTEX,
     *             ISTATE, A, W(LAX), BL, BU, CVEC, X )
C
      IF (MSGLVL .EQ. 99)
     *CALL QPDUMP( N, NROWH, NCOLH,
     *             CVEC, HESS, QPHESS, W(LWRK), W(LPX) )
C
      CALL CHKDAT( NERROR, LENIW, LENW, LITOTL, LWTOTL,
     *             NROWA, N, NCLIN, NCNLN, NCTOTL,
     *             ISTATE, IW(LKACTV),
     *             LCRASH, NAMED, IW(LNAMES), LENNAM,
     *             BIGBND, A, BL, BU, FEATOL, X )
C
      INFORM = 9
      ITER   = 0
      IF (NERROR .NE. 0) GO TO 900
C
C  NO SCALING IS PROVIDED BY THIS VERSION OF  QPSOL.
C  GIVE A FAKE VALUE FOR THE START OF THE SCALE ARRAY.
C
      SCLDQP = .FALSE.
      LSCALE = 1
C
C  ---------------------------------------------------------------------
C  CALL  LPCORE  TO OBTAIN A FEASIBLE POINT, OR SOLVE A LINEAR PROBLEM.
C  ---------------------------------------------------------------------
      CALL LPCORE( LP, MINSUM, NAMED, ORTHOG, UNITQ, VERTEX,
     *             INFORM, ITER, ITMAX, LCRASH,
     *             N, NCLIN, NCTOTL, NROWA, NACTIV, NFREE, NUMINF,
     *             ISTATE, IW(LKACTV), IW(LKFREE),
     *             OBJ, XNORM,
     *             A, W(LAX), BL, BU, CLAMDA, CVEC, FEATOL, X,
     *             IW, LENIW, W, LENW )
C
      IF (LP           ) GO TO 50
      IF (INFORM .EQ. 0) GO TO 100
C
C  TROUBLE IN  LPCORE.
C
C  INFORM CANNOT BE GIVEN THE VALUE  2  WHEN FINDING A FEASIBLE POINT,
C  SO IT IS NECESSARY TO DECREMENT ALL THE VALUES OF  INFORM  THAT ARE
C  GREATER THAN  2.
C
      IF (INFORM .GT. 2) INFORM = INFORM - 1
      INFORM = INFORM + 5
      GO TO 900
C
C  THE PROBLEM WAS AN LP, NOT A QP.
C
   50 IF (INFORM .GT. 2) INFORM = INFORM + 4
      IF (INFORM .EQ. 1) INFORM = 6
      GO TO 900
C
C  ---------------------------------------------------------------------
C  CALL  QPCORE  TO SOLVE A QUADRATIC PROBLEM.
C  ---------------------------------------------------------------------
C
  100 MSG    = MSGLVL
C
C  ******* THE FOLLOWING STATEMENT MUST BE EXECUTED IF  ISTART   *******
C  ******* IS NOT SET IN THE CALLING ROUTINE.                    *******
C
      ISTART = 0
C
      CALL QPCORE( NAMED, ORTHOG, UNITQ, INFORM, ITER, ITMAX,
     *             N, NCLIN, NCTOTL, NROWA, NROWH, NCOLH,
     *             NACTIV, NFREE, QPHESS, ISTATE, IW(LKACTV),IW(LKFREE),
     *             OBJ, XNORM,
     *             A, W(LAX), BL, BU, CLAMDA, CVEC,
     *             FEATOL, HESS, W(LSCALE), X, IW, LENIW, W, LENW )
C
C  PRINT MESSAGES IF REQUIRED.
C
C
  900 IF (MSGLVL .LE.   0) RETURN
      IF (      LP) L = 1
      IF (.NOT. LP) L = 2
      IF (INFORM .EQ.   0) WRITE (NOUT, 1000) LPQP(L)
      IF (INFORM .EQ.   1) WRITE (NOUT, 1010)
      IF (INFORM .EQ.   2) WRITE (NOUT, 1020) LPQP(L)
      IF (INFORM .EQ.   3) WRITE (NOUT, 1030)
      IF (INFORM .EQ.   4) WRITE (NOUT, 1040)
      IF (INFORM .EQ.   5) WRITE (NOUT, 1050)
      IF (INFORM .EQ.   6) WRITE (NOUT, 1060)
      IF (INFORM .EQ.   7) WRITE (NOUT, 1070)
      IF (INFORM .EQ.   8) WRITE (NOUT, 1080)
      IF (INFORM .EQ.   9) WRITE (NOUT, 1090) NERROR
      IF (INFORM .EQ.   9) RETURN
C
      IF (NUMINF .EQ.   0) WRITE (NOUT, 2000) LPQP(L), OBJ
      IF (NUMINF .GT.   0) WRITE (NOUT, 2010) OBJ
      RETURN
C
 1000 FORMAT(/ 22H EXIT QPSOL - OPTIMAL , A2, 10H SOLUTION.)
 1010 FORMAT(/ 33H EXIT QPSOL - WEAK LOCAL MINIMUM.)
 1020 FORMAT(/ 14H EXIT QPSOL - , A2, 23H SOLUTION IS UNBOUNDED.)
 1030 FORMAT(/ 31H EXIT QPSOL - ZERO MULTIPLIERS.)
 1040 FORMAT(/ 53H EXIT QPSOL - TOO MANY ITERATIONS WITHOUT CHANGING X.)
 1050 FORMAT(/ 34H EXIT QPSOL - TOO MANY ITERATIONS.)
 1060 FORMAT(/ 52H EXIT QPSOL - CANNOT SATISFY THE LINEAR CONSTRAINTS.)
 1070 FORMAT(/ 52H EXIT QPSOL - TOO MANY ITERATIONS WITHOUT CHANGING X,
     *         21H DURING THE LP PHASE.)
 1080 FORMAT(/ 33H EXIT QPSOL - TOO MANY ITERATIONS,
     *         21H DURING THE LP PHASE.)
 1090 FORMAT(/ 14H EXIT QPSOL - , I10, 26H ERRORS FOUND IN THE INPUT,
     *         32H PARAMETERS.  PROBLEM ABANDONED.)
 2000 FORMAT(/  7H FINAL , A2, 18H OBJECTIVE VALUE =, G16.7)
 2010 FORMAT(/ 31H FINAL SUM OF INFEASIBILITIES =,    G16.7)
C
C  END OF QPSOL
      END
